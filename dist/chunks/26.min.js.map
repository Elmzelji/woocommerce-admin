{"version":3,"sources":["webpack://wc.[modulename]/./node_modules/@wordpress/date/build-module/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC+B;AACU;AACM;AAC/C,cAAc,wBAAwB;;AAEtC,mBAAmB;AACnB;;AAEA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEO;AACP,0BAA0B;;AAE1B,sBAAsB,6CAAS;AAC/B,EAAE,6CAAS;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2DAA2D;AAC3D;AACA,GAAG;AACH,EAAE,6CAAS;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;;AAEA;AACA;AACA,EAAE,6CAAS,QAAQ,6CAAS;AAC5B;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA,UAAU;AACV;;;AAGA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA,oBAAoB,6CAAS;AAC7B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;AACA;AACA,mBAAmB,6CAAS;;AAE5B,aAAa,uBAAuB;AACpC,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,wBAAwB;AACnC;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA,mBAAmB,6CAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,wBAAwB;AACnC;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,YAAY,OAAO;AACnB;;AAEO;AACP;AACA,mBAAmB,6CAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,QAAQ;AACpB;;AAEO;AACP,YAAY,6CAAS;AACrB,qBAAqB,6CAAS;AAC9B;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,KAAK;AACjB;;AAEO;AACP;AACA,WAAW,6CAAS;AACpB;;AAEA,SAAS,6CAAS;AAClB;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;;AAEA;AACA;AACA,mBAAmB,6CAAS;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA,YAAY,QAAQ;AACpB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iC","file":"chunks/26.min.js","sourcesContent":["/**\n * External dependencies\n */\nimport momentLib from 'moment';\nimport 'moment-timezone/moment-timezone';\nimport 'moment-timezone/moment-timezone-utils';\n/** @typedef {import('moment').Moment} Moment */\n\nvar WP_ZONE = 'WP'; // This regular expression tests positive for UTC offsets as described in ISO 8601.\n// See: https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC\n\nvar VALID_UTC_OFFSET = /^[+-][0-1][0-9](:?[0-9][0-9])?$/; // Changes made here will likely need to be made in `lib/client-assets.php` as\n// well because it uses the `setSettings()` function to change these settings.\n\nvar settings = {\n  l10n: {\n    locale: 'en',\n    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    meridiem: {\n      am: 'am',\n      pm: 'pm',\n      AM: 'AM',\n      PM: 'PM'\n    },\n    relative: {\n      future: '%s from now',\n      past: '%s ago',\n      s: 'a few seconds',\n      ss: '%d seconds',\n      m: 'a minute',\n      mm: '%d minutes',\n      h: 'an hour',\n      hh: '%d hours',\n      d: 'a day',\n      dd: '%d days',\n      M: 'a month',\n      MM: '%d months',\n      y: 'a year',\n      yy: '%d years'\n    }\n  },\n  formats: {\n    time: 'g: i a',\n    date: 'F j, Y',\n    datetime: 'F j, Y g: i a',\n    datetimeAbbreviated: 'M j, Y g: i a'\n  },\n  timezone: {\n    offset: '0',\n    string: ''\n  }\n};\n/**\n * Adds a locale to moment, using the format supplied by `wp_localize_script()`.\n *\n * @param {Object} dateSettings Settings, including locale data.\n */\n\nexport function setSettings(dateSettings) {\n  settings = dateSettings; // Backup and restore current locale.\n\n  var currentLocale = momentLib.locale();\n  momentLib.updateLocale(dateSettings.l10n.locale, {\n    // Inherit anything missing from the default locale.\n    parentLocale: currentLocale,\n    months: dateSettings.l10n.months,\n    monthsShort: dateSettings.l10n.monthsShort,\n    weekdays: dateSettings.l10n.weekdays,\n    weekdaysShort: dateSettings.l10n.weekdaysShort,\n    meridiem: function meridiem(hour, minute, isLowercase) {\n      if (hour < 12) {\n        return isLowercase ? dateSettings.l10n.meridiem.am : dateSettings.l10n.meridiem.AM;\n      }\n\n      return isLowercase ? dateSettings.l10n.meridiem.pm : dateSettings.l10n.meridiem.PM;\n    },\n    longDateFormat: {\n      LT: dateSettings.formats.time,\n      LTS: null,\n      L: null,\n      LL: dateSettings.formats.date,\n      LLL: dateSettings.formats.datetime,\n      LLLL: null\n    },\n    // From human_time_diff?\n    // Set to `(number, withoutSuffix, key, isFuture) => {}` instead.\n    relativeTime: dateSettings.l10n.relative\n  });\n  momentLib.locale(currentLocale);\n  setupWPTimezone();\n}\n/**\n * Returns the currently defined date settings.\n *\n * @return {Object} Settings, including locale data.\n */\n\nexport function __experimentalGetSettings() {\n  return settings;\n}\n\nfunction setupWPTimezone() {\n  // Create WP timezone based off dateSettings.\n  momentLib.tz.add(momentLib.tz.pack({\n    name: WP_ZONE,\n    abbrs: [WP_ZONE],\n    untils: [null],\n    offsets: [-settings.timezone.offset * 60 || 0]\n  }));\n} // Date constants.\n\n/**\n * Number of seconds in one minute.\n *\n * @type {number}\n */\n\n\nvar MINUTE_IN_SECONDS = 60;\n/**\n * Number of minutes in one hour.\n *\n * @type {number}\n */\n\nvar HOUR_IN_MINUTES = 60;\n/**\n * Number of seconds in one hour.\n *\n * @type {number}\n */\n\nvar HOUR_IN_SECONDS = 60 * MINUTE_IN_SECONDS;\n/**\n * Map of PHP formats to Moment.js formats.\n *\n * These are used internally by {@link wp.date.format}, and are either\n * a string representing the corresponding Moment.js format code, or a\n * function which returns the formatted string.\n *\n * This should only be used through {@link wp.date.format}, not\n * directly.\n *\n * @type {Object}\n */\n\nvar formatMap = {\n  // Day\n  d: 'DD',\n  D: 'ddd',\n  j: 'D',\n  l: 'dddd',\n  N: 'E',\n\n  /**\n   * Gets the ordinal suffix.\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  S: function S(momentDate) {\n    // Do - D\n    var num = momentDate.format('D');\n    var withOrdinal = momentDate.format('Do');\n    return withOrdinal.replace(num, '');\n  },\n  w: 'd',\n\n  /**\n   * Gets the day of the year (zero-indexed).\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  z: function z(momentDate) {\n    // DDD - 1\n    return '' + parseInt(momentDate.format('DDD'), 10) - 1;\n  },\n  // Week\n  W: 'W',\n  // Month\n  F: 'MMMM',\n  m: 'MM',\n  M: 'MMM',\n  n: 'M',\n\n  /**\n   * Gets the days in the month.\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  t: function t(momentDate) {\n    return momentDate.daysInMonth();\n  },\n  // Year\n\n  /**\n   * Gets whether the current year is a leap year.\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  L: function L(momentDate) {\n    return momentDate.isLeapYear() ? '1' : '0';\n  },\n  o: 'GGGG',\n  Y: 'YYYY',\n  y: 'YY',\n  // Time\n  a: 'a',\n  A: 'A',\n\n  /**\n   * Gets the current time in Swatch Internet Time (.beats).\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  B: function B(momentDate) {\n    var timezoned = momentLib(momentDate).utcOffset(60);\n    var seconds = parseInt(timezoned.format('s'), 10),\n        minutes = parseInt(timezoned.format('m'), 10),\n        hours = parseInt(timezoned.format('H'), 10);\n    return parseInt((seconds + minutes * MINUTE_IN_SECONDS + hours * HOUR_IN_SECONDS) / 86.4, 10);\n  },\n  g: 'h',\n  G: 'H',\n  h: 'hh',\n  H: 'HH',\n  i: 'mm',\n  s: 'ss',\n  u: 'SSSSSS',\n  v: 'SSS',\n  // Timezone\n  e: 'zz',\n\n  /**\n   * Gets whether the timezone is in DST currently.\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  I: function I(momentDate) {\n    return momentDate.isDST() ? '1' : '0';\n  },\n  O: 'ZZ',\n  P: 'Z',\n  T: 'z',\n\n  /**\n   * Gets the timezone offset in seconds.\n   *\n   * @param {Moment} momentDate Moment instance.\n   *\n   * @return {string} Formatted date.\n   */\n  Z: function Z(momentDate) {\n    // Timezone offset in seconds.\n    var offset = momentDate.format('Z');\n    var sign = offset[0] === '-' ? -1 : 1;\n    var parts = offset.substring(1).split(':');\n    return sign * (parts[0] * HOUR_IN_MINUTES + parts[1]) * MINUTE_IN_SECONDS;\n  },\n  // Full date/time\n  c: 'YYYY-MM-DDTHH:mm:ssZ',\n  // .toISOString\n  r: 'ddd, D MMM YYYY HH:mm:ss ZZ',\n  U: 'X'\n};\n/**\n * Formats a date. Does not alter the date's timezone.\n *\n * @param {string}                  dateFormat PHP-style formatting string.\n *                                             See php.net/date.\n * @param {Date|string|Moment|null} dateValue  Date object or string,\n *                                             parsable by moment.js.\n *\n * @return {string} Formatted date.\n */\n\nexport function format(dateFormat) {\n  var dateValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var i, char;\n  var newFormat = [];\n  var momentDate = momentLib(dateValue);\n\n  for (i = 0; i < dateFormat.length; i++) {\n    char = dateFormat[i]; // Is this an escape?\n\n    if ('\\\\' === char) {\n      // Add next character, then move on.\n      i++;\n      newFormat.push('[' + dateFormat[i] + ']');\n      continue;\n    }\n\n    if (char in formatMap) {\n      if (typeof formatMap[char] !== 'string') {\n        // If the format is a function, call it.\n        newFormat.push('[' + formatMap[char](momentDate) + ']');\n      } else {\n        // Otherwise, add as a formatting string.\n        newFormat.push(formatMap[char]);\n      }\n    } else {\n      newFormat.push('[' + char + ']');\n    }\n  } // Join with [] between to separate characters, and replace\n  // unneeded separators with static text.\n\n\n  newFormat = newFormat.join('[]');\n  return momentDate.format(newFormat);\n}\n/**\n * Formats a date (like `date()` in PHP).\n *\n * @param {string}                  dateFormat PHP-style formatting string.\n *                                             See php.net/date.\n * @param {Date|string|Moment|null} dateValue  Date object or string, parsable\n *                                             by moment.js.\n * @param {string|number|null}      timezone   Timezone to output result in or a\n *                                             UTC offset. Defaults to timezone from\n *                                             site.\n *\n * @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n * @see https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC\n *\n * @return {string} Formatted date in English.\n */\n\nexport function date(dateFormat) {\n  var dateValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var timezone = arguments.length > 2 ? arguments[2] : undefined;\n  var dateMoment = buildMoment(dateValue, timezone);\n  return format(dateFormat, dateMoment);\n}\n/**\n * Formats a date (like `date()` in PHP), in the UTC timezone.\n *\n * @param {string}                  dateFormat PHP-style formatting string.\n *                                             See php.net/date.\n * @param {Date|string|Moment|null} dateValue  Date object or string,\n *                                             parsable by moment.js.\n *\n * @return {string} Formatted date in English.\n */\n\nexport function gmdate(dateFormat) {\n  var dateValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var dateMoment = momentLib(dateValue).utc();\n  return format(dateFormat, dateMoment);\n}\n/**\n * Formats a date (like `wp_date()` in PHP), translating it into site's locale.\n *\n * Backward Compatibility Notice: if `timezone` is set to `true`, the function\n * behaves like `gmdateI18n`.\n *\n * @param {string}                     dateFormat PHP-style formatting string.\n *                                                See php.net/date.\n * @param {Date|string|Moment|null}    dateValue  Date object or string, parsable by\n *                                                moment.js.\n * @param {string|number|boolean|null} timezone   Timezone to output result in or a\n *                                                UTC offset. Defaults to timezone from\n *                                                site. Notice: `boolean` is effectively\n *                                                deprecated, but still supported for\n *                                                backward compatibility reasons.\n *\n * @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n * @see https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC\n *\n * @return {string} Formatted date.\n */\n\nexport function dateI18n(dateFormat) {\n  var dateValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var timezone = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (true === timezone) {\n    return gmdateI18n(dateFormat, dateValue);\n  }\n\n  if (false === timezone) {\n    timezone = undefined;\n  }\n\n  var dateMoment = buildMoment(dateValue, timezone);\n  dateMoment.locale(settings.l10n.locale);\n  return format(dateFormat, dateMoment);\n}\n/**\n * Formats a date (like `wp_date()` in PHP), translating it into site's locale\n * and using the UTC timezone.\n *\n * @param {string}                  dateFormat PHP-style formatting string.\n *                                             See php.net/date.\n * @param {Date|string|Moment|null} dateValue  Date object or string,\n *                                             parsable by moment.js.\n *\n * @return {string} Formatted date.\n */\n\nexport function gmdateI18n(dateFormat) {\n  var dateValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var dateMoment = momentLib(dateValue).utc();\n  dateMoment.locale(settings.l10n.locale);\n  return format(dateFormat, dateMoment);\n}\n/**\n * Check whether a date is considered in the future according to the WordPress settings.\n *\n * @param {string} dateValue Date String or Date object in the Defined WP Timezone.\n *\n * @return {boolean} Is in the future.\n */\n\nexport function isInTheFuture(dateValue) {\n  var now = momentLib.tz(WP_ZONE);\n  var momentObject = momentLib.tz(dateValue, WP_ZONE);\n  return momentObject.isAfter(now);\n}\n/**\n * Create and return a JavaScript Date Object from a date string in the WP timezone.\n *\n * @param {string?} dateString Date formatted in the WP timezone.\n *\n * @return {Date} Date\n */\n\nexport function getDate(dateString) {\n  if (!dateString) {\n    return momentLib.tz(WP_ZONE).toDate();\n  }\n\n  return momentLib.tz(dateString, WP_ZONE).toDate();\n}\n/**\n * Creates a moment instance using the given timezone or, if none is provided, using global settings.\n *\n * @param {Date|string|Moment|null} dateValue Date object or string, parsable\n *                                            by moment.js.\n * @param {string|number|null}      timezone  Timezone to output result in or a\n *                                            UTC offset. Defaults to timezone from\n *                                            site.\n *\n * @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n * @see https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC\n *\n * @return {Moment} a moment instance.\n */\n\nfunction buildMoment(dateValue) {\n  var timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var dateMoment = momentLib(dateValue);\n\n  if (timezone && !isUTCOffset(timezone)) {\n    return dateMoment.tz(timezone);\n  }\n\n  if (timezone && isUTCOffset(timezone)) {\n    return dateMoment.utcOffset(timezone);\n  }\n\n  if (settings.timezone.string) {\n    return dateMoment.tz(settings.timezone.string);\n  }\n\n  return dateMoment.utcOffset(settings.timezone.offset);\n}\n/**\n * Returns whether a certain UTC offset is valid or not.\n *\n * @param {number|string} offset a UTC offset.\n *\n * @return {boolean} whether a certain UTC offset is valid or not.\n */\n\n\nfunction isUTCOffset(offset) {\n  if ('number' === typeof offset) {\n    return true;\n  }\n\n  return VALID_UTC_OFFSET.test(offset);\n}\n\nsetupWPTimezone();\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}