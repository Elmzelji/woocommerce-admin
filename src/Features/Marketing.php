<?php
/**
 * WooCommerce Marketing.
 * NOTE: DO NOT edit this file in WooCommerce core, this is generated from woocommerce-admin.
 *
 * @package Woocommerce Admin
 */

namespace Automattic\WooCommerce\Admin\Features;

use Automattic\WooCommerce\Admin\Marketing\InstalledExtensions;
use Automattic\WooCommerce\Admin\Loader;

/**
 * Contains backend logic for the Marketing feature.
 */
class Marketing {
	/**
	 * Name of recommended plugins transient.
	 *
	 * @var string
	 */
	const RECOMMENDED_PLUGINS_TRANSIENT = 'wc_marketing_recommended_plugins';

	/**
	 * Name of knowledge base post transient.
	 *
	 * @var string
	 */
	const KNOWLEDGE_BASE_TRANSIENT = 'wc_marketing_knowledge_base';

	/**
	 * Class instance.
	 *
	 * @var Marketing instance
	 */
	protected static $instance = null;

	/**
	 * Get class instance.
	 */
	public static function get_instance() {
		if ( ! self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Hook into WooCommerce.
	 */
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'register_pages' ) );

		if ( ! is_admin() ) {
			return;
		}

		add_filter( 'woocommerce_admin_preload_options', array( $this, 'preload_options' ) );
		add_filter( 'woocommerce_shared_settings', array( $this, 'component_settings' ), 30 );
		add_action( 'woocommerce_register_post_type_shop_coupon', array( $this, 'move_coupons' ) );
		add_action( 'admin_head', array( $this, 'fix_coupon_menu_highlight' ), 99 );
		add_filter( 'custom_menu_order', array( $this, 'reorder_coupon_menu' ) );
		add_action( 'admin_menu', array( $this, 'maybe_add_coupon_menu_redirect' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'maybe_add_coupon_script' ) );
	}

	/**
	 * Maybe add our wc-admin coupon scripts to the page if viewing coupon pages
	 */
	public function maybe_add_coupon_script( $hook ) {

		$rtl = is_rtl() ? '-rtl' : '';

		wp_enqueue_style(
			'wc-admin-coupons',
			Loader::get_url( "coupons/style{$rtl}", 'css' ),
			array(),
			Loader::get_file_version( 'css' )
		);

		wp_enqueue_script(
			'wc-admin-coupons',
			Loader::get_url( 'wp-admin-scripts/coupons', 'js' ),
			array( 'wp-i18n', 'wp-data', 'wp-element', 'moment', 'wp-api-fetch', WC_ADMIN_APP ),
			Loader::get_file_version( 'js' ),
			true
		);
	}

	/**
	 * Maybe add menu item back in original spot to help people transition
	 */
	public function maybe_add_coupon_menu_redirect() {

		$get = isset( $_GET['legacy_coupon_menu'] ) ? sanitize_title( $_GET['legacy_coupon_menu'] ) : null;

		if ( 'hide' === $get ) {
    		update_option( 'wc_hide_coupon_menu_rediect', 1 );
		}

		$hide =  ! empty( $get ) ? $get : get_option( 'wc_hide_coupon_menu_rediect' );

		if ( ! get_option( 'wc_hide_coupon_menu_rediect' ) ) {
		    add_submenu_page(
		    	'woocommerce',
		    	'Coupons',
		    	'Coupons',
		    	'manage_options',
		    	'coupons-moved',
		    	array( $this, 'coupon_menu_moved' ),
			);
		}
	}

	/**
	 * Call back for transition menu item
	 */
	public function coupon_menu_moved() {
		?>
		<div class="wrap woocommerce">
			<h1 class="wp-heading-inline">Coupon management has moved!</h1>
			<hr class="wp-header-end" />
			<p>Coupons can now be managed from:<p>
			<p><a href="<?php echo admin_url( 'edit.php?post_type=shop_coupon&legacy_coupon_menu=hide' ); ?>">Marketing > Coupons</a></p>
			<p>Clicking the above link will redirect you to the new page and hide this menu item.</p>
		</div>
		<?php
	}


	/**
	 * Modify registered post type shop_coupon
	 *
	 * @param array $args Array of post type parameters.
	 */
	public function move_coupons( $args ) {
		$args['show_in_menu'] = current_user_can( 'manage_woocommerce' ) ? 'wc-admin&path=/marketing/overview' : true;
		return $args;
	}

	/**
	 * Undo WC modifications to $parent_file for 'shop_coupon'
	 */
	public function fix_coupon_menu_highlight() {
		global $parent_file, $post_type;

		if ( 'shop_coupon' === $post_type ) {
			$parent_file = 'wc-admin&path=/marketing/overview';  // WPCS: override ok.
		}
	}

	/**
	 * Redorder marketing submenu items so Overview is at the top
	 *
	 * @param array $menu_order
	 */
	public function reorder_coupon_menu( $menu_order ) {

	    global $submenu;

		$marketing = 'wc-admin&path=/marketing/overview';
		$settings  = $submenu[$marketing];

		foreach ( $settings as $key => $details ) {
			if ( $details[0] == 'Overview' ) {
				$index = $key;
			}
		}

		$temp = array( $index => $settings[$index] );
		unset( $settings[$index] );
		$settings = $temp + $settings;
		$submenu[$marketing] = $settings;

	    return $menu_order;
	}

	/**
	 * Registers report pages.
	 */
	public function register_pages() {
		$marketing_pages = array(
			array(
				'id'       => 'woocommerce-marketing',
				'title'    => __( 'Marketing', 'woocommerce-admin' ),
				'path'     => '/marketing/overview',
				'icon'     => 'dashicons-megaphone',
				'position' => 58, // After WooCommerce & Product menu items.
			),
			array(
				'id'       => 'woocommerce-marketing-overview',
				'title'    => __( 'Overview', 'woocommerce-admin' ),
				'parent' => 'woocommerce-marketing',
				'path'     => '/marketing/overview',
			),
		);

		$marketing_pages = apply_filters( 'woocommerce_marketing_menu_items', $marketing_pages );

		foreach ( $marketing_pages as $marketing_page ) {
			if ( ! is_null( $marketing_page ) ) {
				wc_admin_register_page( $marketing_page );
			}
		}
	}

	/**
	 * Preload options to prime state of the application.
	 *
	 * @param array $options Array of options to preload.
	 * @return array
	 */
	public function preload_options( $options ) {
		$options[] = 'woocommerce_marketing_overview_welcome_hidden';

		return $options;
	}

	/**
	 * Add settings for marketing feature.
	 *
	 * @param array $settings Component settings.
	 * @return array
	 */
	public function component_settings( $settings ) {
		// Bail early if not on a wc-admin powered page.
		if ( ! Loader::is_admin_page() ) {
			return $settings;
		}

		$settings['marketing']['installedExtensions'] = InstalledExtensions::get_data();

		return $settings;
	}

	/**
	 * Load recommended plugins from WooCommerce.com
	 *
	 * @return array
	 */
	public function get_recommended_plugins() {
		$plugins = get_transient( self::RECOMMENDED_PLUGINS_TRANSIENT );

		if ( false === $plugins ) {
			$request = wp_remote_get( 'https://woocommerce.com/wp-json/wccom/marketing-tab/1.0/recommendations.json' );
			$plugins = [];

			if ( ! is_wp_error( $request ) && 200 === $request['response']['code'] ) {
				$plugins = json_decode( $request['body'], true );
			}

			set_transient(
				self::RECOMMENDED_PLUGINS_TRANSIENT,
				$plugins,
				// Expire transient in 15 minutes if remote get failed.
				// Cache an empty result to avoid repeated failed requests.
				empty( $plugins ) ? 900 : 3 * DAY_IN_SECONDS
			);
		}

		return array_values( $plugins );
	}

	/**
	 * Load knowledge base posts from WooCommerce.com
	 *
	 * @return array
	 */
	public function get_knowledge_base_posts() {
		$posts = get_transient( self::KNOWLEDGE_BASE_TRANSIENT );

		if ( false === $posts ) {
			$request_url = add_query_arg(
				array(
					'categories' => 1744, // Marketing.
					'page'       => 1,
					'per_page'   => 8,
					'_embed'     => 1,
				),
				'https://woocommerce.com/wp-json/wp/v2/posts'
			);
			$request = wp_remote_get( $request_url );
			$posts   = [];

			if ( ! is_wp_error( $request ) && 200 === $request['response']['code'] ) {
				$raw_posts = json_decode( $request['body'], true );

				foreach ( $raw_posts as $raw_post ) {
					$post = [
						'title'         => html_entity_decode( $raw_post['title']['rendered'] ),
						'date'          => $raw_post['date_gmt'],
						'link'          => $raw_post['link'],
						'author_name'   => isset( $raw_post['author_name'] ) ? html_entity_decode( $raw_post['author_name'] ) : '',
						'author_avatar' => isset( $raw_post['author_avatar_url'] ) ? $raw_post['author_avatar_url'] : '',
					];

					$featured_media = $raw_post['_embedded']['wp:featuredmedia'];

					if ( count( $featured_media ) > 0 ) {
						$image         = current( $featured_media );
						$post['image'] = add_query_arg(
							array(
								'resize' => '650,340',
								'crop'   => 1,
							),
							$image['source_url']
						);
					}

					$posts[] = $post;
				}
			}

			set_transient(
				self::KNOWLEDGE_BASE_TRANSIENT,
				$posts,
				// Expire transient in 15 minutes if remote get failed.
				empty( $posts ) ? 900 : DAY_IN_SECONDS
			);
		}

		return $posts;
	}

}
